General
=======

To learn more about ./waf, refer to http://code.google.com/p/waf/
and http://waf.googlecode.com/svn/docs/wafbook/single.html

Ideally, you will need only to add your source files in wscript, which is basically a Python program.

How to use skeleton
===================

Due to restrictions on lnxsrv, several steps necessary to compile and run (if you're using this skeleton):

1. The following lines should be added to your ~/.bashrc

export PATH=/usr/local/cs/bin:$PATH
export LD_LIBRARY_PATH=/u/cs/grad/yingdi/boost/lib:/usr/local/lib64/:$LD_LIBRARY_PATH

2. To configure environment

./waf configure

If there are any errors, please email me.

3. To build/rebuild the code

./waf

4. All compiled executables are located in build/, so you can run them as this:

build/http-proxy

Code Description
================
The program will listen for peers and create a thread to handle each thread's requests using servePeer function.
servePeer will receive the requests one at a time and query the cache for response.
If cache has the response and it's not expired, the PeerRequest will be "finished" meaning the response is ready to be sent. Else servePeer will call getResponse function to get the response.
servePeer will then format the response and call AttemptAdd to the cache.
Finally, servePeer will send the response to the peer.


Design Decisions
=================
- whenever the program runs into some error, such as an unconnectable peer, the program will exit for simplicity
- use of a struct to contain each peer request

